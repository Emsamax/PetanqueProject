package com.example.demo.models;

import jakarta.persistence.*;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import io.swagger.v3.oas.annotations.media.Schema;

import java.util.List;

/**
 * Represents the petanque ground in the system.
 * This class is mapped to the "terrain" table in the database.
 */
@Entity
@Data
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@NoArgsConstructor
@Table(name = "terrain")
public class Terrain {

    /**
     * The unique identifier for the petanque ground.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Schema(description = "The unique identifier for the petanque ground.")
    private Integer id;

    /**
     * The name of the petanque ground.
     * This field cannot be null and has a maximum length of 100 characters.
     */
    @Column(name = "nom", nullable = false, length = 100)
    @NotBlank(message = "The name cannot be empty.")
    @Schema(description = "The name of the petanque ground (maximum 100 characters).")
    private String nom;

    /**
     * The quantity of available petanque grounds.
     * This field cannot be null and must be greater than or equal to zero.
     */
    @Column(name = "quantite", nullable = false)
    @NotNull(message = "The quantity cannot be null.")
    @Min(value = 0, message = "The quantity must be greater than or equal to zero.")
    @Schema(description = "The quantity of available petanque grounds (must be >= 0).")
    private Integer quantite;

    /**
     * A description of the petanque ground.
     * This field has a maximum length of 100 characters.
     * This field is optional.
     */
    @Column(name = "description", length = 100)
    @Schema(description = "A description of the petanque ground (maximum 100 characters).")
    private String description;

    /**
     * The geographic point (location) of the petanque ground.
     * This field cannot be null and has a maximum length of 100 characters.
     */
    @Column(name = "point_geo", nullable = false, length = 100)
    @NotBlank(message = "The geographic point cannot be empty.")
    @Schema(description = "The geographic point (location) of the petanque ground (maximum 100 characters).")
    private String pointGeo;

    /**
     * A list of reservations associated with this petanque ground.
     * This field is optional.
     */
    @OneToMany(mappedBy = "terrain")
    @Schema(description = "The list of reservations associated with this petanque ground.",
            implementation = Reservation.class)
    private List<Reservation> reservations;
}
